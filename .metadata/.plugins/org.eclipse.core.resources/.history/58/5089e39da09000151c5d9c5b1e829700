package vue;

import java.util.*;

import javax.swing.BorderFactory;
import javax.swing.JLabel;

import modele.Intersection;
import modele.Itineraire;
import modele.Plan;
import modele.Tournee;
import modele.Troncon;

/**
 * 
 */
public class VueTextuelle extends JLabel implements Observer{

	private String text;
	private Tournee tournee;
	private FenetreIHM fenetre;

    /**
     * @param tournee 
     * @param fenetreIHM
     */
    public VueTextuelle(Tournee tournee, FenetreIHM fenetreIHM) {
    	super();
    	this.fenetre = fenetreIHM;
    	this.tournee = tournee;
    	this.tournee.addObserver(this);
		setBorder(BorderFactory.createTitledBorder("Tournée :"));
		this.setVerticalTextPosition(TOP);
		this.setVerticalAlignment(TOP);
		fenetre.getContentPane().add(this);
    }
    
    protected void changeText(String s){
    	this.setText(s);
    }

    /**
     * @param observable 
     * @param objet
     */
    public void update(Observable observable, Object objet) {
        this.setText(tournee.text);
        
        List<Itineraire> listeItineraire = this.tournee.getItineraires();
        System.out.println("Taille Liste itineraire : "+listeItineraire.size());
        Set<Troncon> listeTroncon = new HashSet<Troncon>();
        System.out.println("Nombre troncon : "+listeTroncon.size());
        for(Itineraire itineraire : listeItineraire){
        	listeTroncon.addAll(itineraire.getTronçons());
        }
        
        for(Troncon troncon : listeTroncon){
        	Intersection origine = troncon.getOrigine();
        	Intersection destination = troncon.getDestination();
        	
        	this.setText(origine.toString()+'\n'+destination.toString());
        }
        
        
    }




}