package controleur;

import java.awt.Point;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.util.*;

import modele.DemandeDeLivraison;
import modele.Intersection;
import modele.Itineraire;
import modele.Livraison;
import modele.Modele;
import modele.Plan;
import modele.Tournee;
import modele.Troncon;

import vue.FenetreIHM;
import xml.GenerateurFeuilleDeRoute;

/**
 * Cette classe fait l'interface avec la Vue et le Modele. Modele MVC.
 */
public class Controleur {

	/**
	 * Instance de l'etat initial.
	 */
	public static final EtatInit etatInit = new EtatInit();
	
	/**
	 * Instance de l'etat plan charge/
	 */
	public static final EtatPlanCharge etatPlanCharge = new EtatPlanCharge();
	/**
	 * Instance de l'etat livraison chargee.
	 */
	public static final EtatLivraisonChargee etatLivraisonChargee = new EtatLivraisonChargee();
	/**
	 * Instance de l'etat tournee calculee.
	 */
	public static final EtatTourneeCalculee etatTourneeCalculee = new EtatTourneeCalculee();
	
	/**
	 * Instance de l'etat deux livraisons selectionnees.
	 */
	public static final EtatDeuxLivraisonSelectionnee etatDeuxLivraisonSelectionnee = new EtatDeuxLivraisonSelectionnee();
	/**
	 * Instance de l'etat intersection selectionnee.
	 */
	public static final EtatIntersectionSelectionnee etatIntersectionSelectionnee = new EtatIntersectionSelectionnee();
	/**
	 * Instance de l'etat livraison precedente selectionnee.
	 */
	public static final EtatLivraisonPrecedenteSelectionnee etatLivraisonPrecedenteSelectionnee = new EtatLivraisonPrecedenteSelectionnee();
	/**
	 * Instance de la livraison selectionnee.
	 */
	public static final EtatLivraisonsSelectionnees etatLivraisonsSelectionnees = new EtatLivraisonsSelectionnees();
	
	
	
	
	/**
	 * Change l'etat courant du controleur
	 * @param etat le nouvel etat courant
	 */
	protected static void setEtatCourant(Etat etat){
		etatCourant = etat;
		System.out.println("Etat changé pour : "+etat);
	}
	
    /**
     * Represente l'etat courant
     */
    protected static Etat etatCourant;

    /**
     * Liste de commande de modications pour undo et redo
     */
    protected ListeCommande listeCommandes;

    /**
     * Represente la fenetre utilisateur
     */
    protected FenetreIHM fenetre;

    /**
     * Represente le modele
     */
    protected Modele modele;
    
     /** 
      * Constructeur par défaut
     */
    public Controleur() {
    	this.modele = new Modele();
    	
    	this.listeCommandes = new ListeCommande();
    	
    	etatCourant = etatInit;
    	
    	fenetre = new FenetreIHM(modele, this);
    }
    
    /**
     * Permet d'afficher un message dans la zone affectée dans la fenetre utilisateur.
     * @param Le message a affiché.
     */
    public void afficheMessageIHM(String s){
    	this.fenetre.afficheMessage(s);
    }
    
    /**
     * Permet de faire un undo sur la liste des commandes.
     */
    public void undo() {
        this.etatCourant.undo(listeCommandes);
    }

    /**
     * Permet de faire un redo sur la liste des commandes.
     */
    public void redo() {
        this.etatCourant.redo(listeCommandes);
    }

    
    
    // NOYAU MINIMAL
    
	public void ouvrirPlan() {
		this.etatCourant.ouvrirPlan(this.modele);	
		this.modele.changementEffectue();
	}
	
    /**
     * 
     */
    public void importerLivraison() {
        this.etatCourant.importerLivraison(fenetre,this.modele, this.modele.getPlan());
        this.modele.changementEffectue();
    }

    /**
     * 
     */
    public void calculerTournee() {
        this.etatCourant.calculerTournee(modele, fenetre);
        this.modele.changementEffectue();
    }

    
    
    // MODIFICATION TOURNEE
    
    /**
     * 
     */
    public void ajouterLivraison() {
        this.etatCourant.ajouterLivraison(this.modele, listeCommandes);
        this.modele.changementEffectue();
    }

    /**
     * 
     */
    public void modifierLivraison() {
        this.etatCourant.modifierLivraison(this.modele, listeCommandes);
        this.modele.changementEffectue();
    }
    

    /**
     * 
     */
    public void supprimeLivraison() {
        this.etatCourant.supprimeLivraison(this.modele, listeCommandes);
        this.modele.changementEffectue();
    }
    
    
    
    // GENERATION FEUILLE DE ROUTE
    
    /**
     * 
     */
    public void genererFeuilleRoute() {
    	this.etatCourant.genererFeuilleRoute(this.fenetre, this.modele.getTournee());
    }

    /**
     * 
     */
    
    
    
    // GESTION SOURIS
    
    public void clicGauche(Point p) {
        this.etatCourant.clicGauche(fenetre,this.modele.getPlan(),p,this.modele.getDemandeDeLivraison());
    }

	public void clicDroit(Point p) {
		this.etatCourant.clicDroit(fenetre,p);		
	}
	
	
	// GESTION CLAVIER
	
	public void caractereSaisi(int keyCode) {
		switch(keyCode){
			case KeyEvent.VK_P:
				this.ouvrirPlan();
				break;
			case KeyEvent.VK_L:
				this.importerLivraison();
				break;
			case KeyEvent.VK_T:
				this.calculerTournee();
				break;
			case KeyEvent.VK_G:
				this.genererFeuilleRoute();
				break;
			case KeyEvent.VK_U:
				this.undo();
				break;
			case KeyEvent.VK_R:
				this.redo();
				break;
			case KeyEvent.VK_A:
				this.ajouterLivraison();
				break;
			case KeyEvent.VK_S:
				this.supprimeLivraison();
				break;
			case KeyEvent.VK_M:
				this.modifierLivraison();
				break;
		}
	}
	
	// CARACTERISTIQUE DU PLAN
	public int getPlanLargeur() {
		return this.modele.getPlan().getLargeur();
	}

	public int getPlanHauteur() {
		return this.modele.getPlan().getHauteur();
	}


}